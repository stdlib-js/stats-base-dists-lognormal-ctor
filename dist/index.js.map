{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-lognormal-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-lognormal-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-lognormal-mean' );\nvar median = require( '@stdlib/stats-base-dists-lognormal-median' );\nvar mode = require( '@stdlib/stats-base-dists-lognormal-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-lognormal-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-lognormal-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-lognormal-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-lognormal-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-lognormal-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-lognormal-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-lognormal-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-lognormal-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction lognormalCDF( x ) {\n\treturn cdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction lognormalLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction lognormalLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction lognormalPDF( x ) {\n\treturn pdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction lognormalQuantile( p ) {\n\treturn quantile( p, this.mu, this.sigma );\n}\n\n\n// MAIN //\n\n/**\n* Lognormal distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [sigma=1.0] - scale parameter\n* @throws {TypeError} `sigma` must be a positive number\n* @returns {LogNormal} distribution instance\n*\n* @example\n* var lognormal = new LogNormal( 1.0, 1.0 );\n*\n* var y = lognormal.cdf( 1.5 );\n* // returns ~0.276\n*\n* var v = lognormal.mean;\n* // returns ~4.482\n*/\nfunction LogNormal() {\n\tvar sigma;\n\tvar mu;\n\tif ( !(this instanceof LogNormal) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new LogNormal();\n\t\t}\n\t\treturn new LogNormal( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', sigma ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tsigma = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'sigma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn sigma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tsigma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Lognormal distribution differential entropy.\n*\n* @name entropy\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.entropy;\n* // returns ~7.904\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.kurtosis;\n* // returns 1.4243659274306933e+250\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution expected value.\n*\n* @name mean\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.mean;\n* // returns 1.0148003881138887e+33\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution median.\n*\n* @name median\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.median;\n* // returns ~54.598\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'median', function get() {\n\treturn median( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution mode.\n*\n* @name mode\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.mode;\n* // returns 1.580420060273613e-61\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution skewness.\n*\n* @name skewness\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.skewness;\n* // returns 6.421080152185613e+93\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution standard deviation.\n*\n* @name stdev\n* @memberof LogNormal.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.stdev;\n* // returns 1.886180808490652e+64\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution variance.\n*\n* @name variance\n* @memberof LogNormal.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.variance;\n* // returns 3.55767804231845e+128\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.sigma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.cdf( 0.5 );\n* // returns ~0.25\n*/\nsetReadOnly( LogNormal.prototype, 'cdf', lognormalCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.logcdf( 0.5 );\n* // returns ~-1.385\n*/\nsetReadOnly( LogNormal.prototype, 'logcdf', lognormalLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.logpdf( 0.8 );\n* // returns ~-2.237\n*/\nsetReadOnly( LogNormal.prototype, 'logpdf', lognormalLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.pdf( 0.8 );\n* // returns ~0.107\n*/\nsetReadOnly( LogNormal.prototype, 'pdf', lognormalPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.quantile( 0.5 );\n* // returns ~7.389\n*/\nsetReadOnly( LogNormal.prototype, 'quantile', lognormalQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = LogNormal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lognormal distribution constructor.\n*\n* @module @stdlib/stats-base-dists-lognormal-ctor\n*\n* @example\n* var LogNormal = require( '@stdlib/stats-base-dists-lognormal-ctor' );\n*\n* var lognormal = new LogNormal( 1.0, 1.0 );\n*\n* var y = lognormal.cdf( 1.5 );\n* // returns ~0.276\n*\n* var mean = lognormal.mean;\n* // returns ~4.482\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "isNumber", "isnan", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "pdf", "quantile", "format", "lognormalCDF", "x", "lognormalLogCDF", "lognormalLogPDF", "lognormalPDF", "lognormalQuantile", "p", "LogNormal", "sigma", "mu", "value", "main"]
}
